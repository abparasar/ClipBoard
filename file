import torch
from datasets import load_dataset
from transformers import (
    BartTokenizer,
    BartForConditionalGeneration,
    DataCollatorForSeq2Seq,
    Seq2SeqTrainer,
    Seq2SeqTrainingArguments,
)

# === Paths ===
model_path = "./model"  # Your locally saved BART model
data_path = {
    "train": "./data/train.jsonl",
    "validation": "./data/val.jsonl",
    "test": "./data/test.jsonl"
}

# === Load model and tokenizer ===
tokenizer = BartTokenizer.from_pretrained(model_path)
model = BartForConditionalGeneration.from_pretrained(model_path)
model.gradient_checkpointing_enable()

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model.to(device)

# === Load dataset ===
dataset = load_dataset("json", data_files=data_path)

# === Preprocess function ===
def preprocess(example):
    model_inputs = tokenizer(
        example["dialogue"],
        max_length=512,
        padding="max_length",
        truncation=True,
    )
    with tokenizer.as_target_tokenizer():
        labels = tokenizer(
            example["summary"],
            max_length=64,
            padding="max_length",
            truncation=True,
        )
    model_inputs["labels"] = labels["input_ids"]
    return model_inputs

# === Tokenize datasets ===
tokenized_dataset = dataset.map(preprocess, batched=True, remove_columns=dataset["train"].column_names)

# === Data collator ===
data_collator = DataCollatorForSeq2Seq(tokenizer=tokenizer, model=model, return_tensors="pt")

# === Training arguments ===
training_args = Seq2SeqTrainingArguments(
    output_dir="./results",
    evaluation_strategy="epoch",
    save_strategy="epoch",
    learning_rate=5e-5,
    per_device_train_batch_size=1,
    per_device_eval_batch_size=1,
    gradient_accumulation_steps=2,
    num_train_epochs=3,
    predict_with_generate=True,
    fp16=True,
    logging_dir="./logs",
    logging_steps=100,
    report_to="none",
)

# === Trainer ===
trainer = Seq2SeqTrainer(
    model=model,
    args=training_args,
    train_dataset=tokenized_dataset["train"],
    eval_dataset=tokenized_dataset["validation"],
    tokenizer=tokenizer,
    data_collator=data_collator,
)

# === Train ===
trainer.train()

# === Evaluate on test set (optional) ===
metrics = trainer.evaluate(tokenized_dataset["test"])
print("Test metrics:", metrics)