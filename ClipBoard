from transformers import PegasusTokenizer, PegasusForConditionalGeneration, Seq2SeqTrainer, Seq2SeqTrainingArguments, DataCollatorForSeq2Seq
from datasets import Dataset
from sklearn.model_selection import train_test_split
import pandas as pd
import torch
import evaluate
import numpy as np

# ✅ Device
device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')

# ✅ Data
df = pd.read_csv("/projectspace/zkfq4hl/data/titlesum.csv")
df = df.head(1000)

# ✅ Train/val/test split
train, test = train_test_split(df, test_size=0.2, random_state=42)
train, valid = train_test_split(train, test_size=0.2, random_state=42)

print(f"Train: {len(train)}, Val: {len(valid)}, Test: {len(test)}")

# ✅ Load tokenizer + model
tokenizer = PegasusTokenizer.from_pretrained("google/pegasus-large")
model = PegasusForConditionalGeneration.from_pretrained("google/pegasus-large").to(device)

# ✅ Preprocessing
def preprocess(examples):
    inputs = examples["dialogue"]
    model_inputs = tokenizer(inputs, max_length=512, truncation=True, padding=True)

    with tokenizer.as_target_tokenizer():
        labels = tokenizer(
            examples["one_liner"],
            max_length=128,
            truncation=True,
            padding=True
        )
    model_inputs["labels"] = labels["input_ids"]
    return model_inputs

# ✅ Tokenize
tokenized_train = Dataset.from_pandas(train).map(preprocess, batched=True)
tokenized_valid = Dataset.from_pandas(valid).map(preprocess, batched=True)
tokenized_test  = Dataset.from_pandas(test).map(preprocess, batched=True)

# ✅ Data collator
data_collator = DataCollatorForSeq2Seq(
    tokenizer=tokenizer,
    model=model
)

# ✅ Metric
rouge = evaluate.load("rouge")

def compute_metrics(eval_pred):
    predictions, labels = eval_pred
    if isinstance(predictions, tuple):
        predictions = predictions[0]

    predictions = np.where(predictions >= 0, predictions, tokenizer.pad_token_id)
    decoded_preds = tokenizer.batch_decode(predictions, skip_special_tokens=True)

    labels = np.where(labels != -100, labels, tokenizer.pad_token_id)
    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)

    result = rouge.compute(predictions=decoded_preds, references=decoded_labels, use_stemmer=True)
    result = {k: round(v, 4) for k, v in result.items()}
    return result

# ✅ Trainer args
training_args = Seq2SeqTrainingArguments(
    output_dir="./pegasus-summarizer",
    evaluation_strategy="epoch",
    learning_rate=5e-5,
    per_device_train_batch_size=2,
    per_device_eval_batch_size=2,
    weight_decay=0.01,
    num_train_epochs=3,
    predict_with_generate=True,
    fp16=True if torch.cuda.is_available() else False,
    save_total_limit=1
)

# ✅ Trainer
trainer = Seq2SeqTrainer(
    model=model,
    args=training_args,
    train_dataset=tokenized_train,
    eval_dataset=tokenized_valid,
    tokenizer=tokenizer,
    data_collator=data_collator,
    compute_metrics=compute_metrics,
)

# ✅ Train
trainer.train()