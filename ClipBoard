import numpy as np
import pandas as pd
import torch
from torch.utils.data import Dataset, DataLoader
from transformers import BertTokenizer, BertForSequenceClassification, TrainingArguments, Trainer
from sklearn.metrics import f1_score
from sklearn.model_selection import ParameterSampler
import time

# Define custom dataset class
class IntentDataset(Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels

    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        item['labels'] = torch.tensor(self.labels[idx])
        return item

    def __len__(self):
        return len(self.labels)

# Load data
data = pd.read_parquet('expanded_dataframe.parquet')
train_texts, test_texts, train_labels, test_labels = train_test_split(data['Utterances'], data['Expected Intent'], test_size=0.1)

# Initialize tokenizer
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')

# Tokenize and encode
train_encodings = tokenizer(train_texts.tolist(), truncation=True, padding=True, return_tensors='pt')
test_encodings = tokenizer(test_texts.tolist(), truncation=True, padding=True, return_tensors='pt')

train_dataset = IntentDataset(train_encodings, train_labels.tolist())
test_dataset = IntentDataset(test_encodings, test_labels.tolist())

# Define hyperparameter space
param_grid = {
    'per_device_train_batch_size': [8, 16, 32],
    'learning_rate': [1e-5, 2e-5, 5e-5],
    'num_train_epochs': [2, 3, 4]
}

# Random search
best_score = 0
best_params = None
n_iter = 10  # Number of random configurations to sample

for params in ParameterSampler(param_grid, n_iter=n_iter):
    print(f"Trying parameters: {params}")

    model = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=len(data['Expected Intent'].unique()))
    model = model.to('cuda')  # Move model to GPU

    training_args = TrainingArguments(
        per_device_train_batch_size=params['per_device_train_batch_size'],
        learning_rate=params['learning_rate'],
        num_train_epochs=params['num_train_epochs'],
        output_dir='./results',
        evaluation_strategy="epoch",
        logging_dir='./logs',
    )

    trainer = Trainer(
        model=model,
        args=training_args,
        train_dataset=train_dataset,
        eval_dataset=test_dataset,
        compute_metrics=lambda p: {
            'f1': f1_score(p.label_ids, p.predictions.argmax(axis=-1), average='macro'),
            'f0.5': f1_score(p.label_ids, p.predictions.argmax(axis=-1), average='macro', beta=0.5)
        }
    )

    start_time = time.time()
    trainer.train()
    end_time = time.time()
    print(f"Training time: {end_time - start_time} seconds")

    eval_results = trainer.evaluate()
    f1 = eval_results['eval_f1']
    
    if f1 > best_score:
        best_score = f1
        best_params = params
        print(f"New best parameters found: {best_params}")

print(f"Best score: {best_score}")
print(f"Best parameters: {best_params}")

# Save the best model
model.save_pretrained('./best_finetuned_bert_model')