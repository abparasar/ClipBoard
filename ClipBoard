from sklearn.model_selection import StratifiedKFold
from transformers import BertForSequenceClassification, Trainer, TrainingArguments
import torch
import numpy as np

# Assume the dataset and labels are in `train_dataset` and `train_labels` respectively
# Example dataset preparation (adjust as per your actual dataset)
X = df['utterance'].tolist()
y = df['intent'].tolist()

# Define the number of splits for StratifiedKFold
n_splits = 5
skf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42)

# Loop over each fold
for fold, (train_idx, val_idx) in enumerate(skf.split(X, y)):
    print(f"Fold {fold + 1}/{n_splits}")

    # Convert to TensorDataset if not already
    train_fold_dataset = torch.utils.data.TensorDataset(
        torch.tensor(np.array(X)[train_idx]), 
        torch.tensor(np.array(y)[train_idx])
    )
    
    val_fold_dataset = torch.utils.data.TensorDataset(
        torch.tensor(np.array(X)[val_idx]), 
        torch.tensor(np.array(y)[val_idx])
    )

    # Load pre-trained BERT model for sequence classification
    model = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=len(set(y)))

    # Define training arguments
    training_args = TrainingArguments(
        output_dir=f'./results_fold_{fold}',          # output directory for checkpoints and results
        num_train_epochs=3,                           # number of epochs
        per_device_train_batch_size=8,                # batch size for training
        per_device_eval_batch_size=16,                # batch size for evaluation
        evaluation_strategy="epoch",                  # evaluate at the end of each epoch
        save_strategy="epoch",                        # save model at end of each epoch
        logging_dir='./logs',                         # directory for storing logs
        logging_steps=10,                             # log every 10 steps
        load_best_model_at_end=True,                  # load best model when finished training
        metric_for_best_model="accuracy",             # use accuracy to select best model
    )

    # Initialize the Trainer
    trainer = Trainer(
        model=model,                                  # the instantiated ðŸ¤— Transformers model to be trained
        args=training_args,                           # training arguments, defined above
        train_dataset=train_fold_dataset,             # the training dataset for this fold
        eval_dataset=val_fold_dataset,                # the evaluation dataset for this fold
        compute_metrics=compute_metrics               # function to compute evaluation metrics
    )

    # Train and evaluate for the current fold
    trainer.train()

    # Save the model for this fold
    trainer.save_model(f'./model_fold_{fold}')