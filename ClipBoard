import numpy as np
import pandas as pd
from sklearn.metrics import f1_score, precision_score, recall_score

# Example predicted probabilities (replace this with your model's output)
# Assume `y_prob` is a 2D array of shape (n_samples, n_classes)
# and `y_true` is a 1D array of true class labels.
y_prob = np.array([[0.1, 0.6, 0.3], [0.8, 0.1, 0.1], [0.4, 0.5, 0.1]])
y_true = np.array([1, 0, 1])  # Example true labels

# Set the range of thresholds
thresholds = np.arange(0, 1.01, 0.01)
best_threshold = 0
best_f1 = 0

for threshold in thresholds:
    # Convert probabilities to binary predictions
    y_pred = np.argmax(y_prob >= threshold, axis=1)  # Assuming multiclass with argmax

    # Calculate metrics
    f1 = f1_score(y_true, y_pred, average='weighted')
    
    # Check if this is the best F1 score
    if f1 > best_f1:
        best_f1 = f1
        best_threshold = threshold

print(f'Best Threshold: {best_threshold}, Best F1 Score: {best_f1}')