import pandas as pd
import numpy as np
from sklearn.metrics import roc_curve, auc

# Load the data
file_path = 'x.xlsx'  # Make sure your file is named correctly
sheet_name = 'y'

df = pd.read_excel(file_path, sheet_name=sheet_name)

# Assuming your dataframe has the following columns: 'score', 'good', 'fraud'
# Bin the data into 10 equal bins based on the score
df['bin'] = pd.qcut(df['score'], 10, labels=False)

# Group by bins and calculate the sum of good and fraud transactions in each bin
binned_df = df.groupby('bin').agg({'good': 'sum', 'fraud': 'sum', 'score': 'mean'}).reset_index()

# Calculate total good and fraud transactions
total_good = binned_df['good'].sum()
total_fraud = binned_df['fraud'].sum()

# Calculate cumulative good and fraud transactions
binned_df['cum_good'] = binned_df['good'].cumsum()
binned_df['cum_fraud'] = binned_df['fraud'].cumsum()

# Calculate KS statistic
binned_df['cum_good_perc'] = binned_df['cum_good'] / total_good
binned_df['cum_fraud_perc'] = binned_df['cum_fraud'] / total_fraud
binned_df['ks_statistic'] = binned_df['cum_fraud_perc'] - binned_df['cum_good_perc']
ks_statistic = binned_df['ks_statistic'].max()

# Calculate AUC
fpr, tpr, thresholds = roc_curve(df['fraud'], df['score'])
roc_auc = auc(fpr, tpr)

# Calculate Gini coefficient
gini = 2 * roc_auc - 1

print(f'KS Statistic: {ks_statistic}')
print(f'AUC: {roc_auc}')
print(f'Gini Coefficient: {gini}')