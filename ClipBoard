from sklearn.model_selection import train_test_split

# Identify rare classes (1 sample only)
label_counts = df['label'].value_counts()
rare_classes = label_counts[label_counts == 1].index.tolist()

# Put all rare samples in training set
df_rare = df[df['label'].isin(rare_classes)]
df_common = df[~df['label'].isin(rare_classes)]

# Encode after splitting
train_texts_common, val_texts_common, train_labels_common, val_labels_common = train_test_split(
    df_common['text'], df_common['label'], test_size=0.1, random_state=42, stratify=df_common['label']
)

# Combine rare class samples with train split
train_texts = pd.concat([train_texts_common, df_rare['text']], ignore_index=True)
train_labels = pd.concat([train_labels_common, df_rare['label']], ignore_index=True)

val_texts = val_texts_common
val_labels = val_labels_common

# Now re-encode labels
le = LabelEncoder()
all_labels = pd.concat([train_labels, val_labels])
le.fit(all_labels)
train_labels = le.transform(train_labels)
val_labels = le.transform(val_labels)

# Save target class index for monitoring later
target_class_id = le.transform(['card_decline_problem'])[0]