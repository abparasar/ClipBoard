import torch
from torch import nn
from torch.utils.data import DataLoader, Dataset
from transformers import BertTokenizer, BertModel, AdamW
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import pandas as pd

# Load your dataset
# Assume df is a DataFrame with 'utterance' and 'intent' columns
df = pd.read_csv('path_to_your_dataset.csv')  # Replace with your dataset path
utterances = df['utterance'].tolist()
intents = df['intent'].tolist()

# Create a custom Dataset class
class IntentDataset(Dataset):
    def __init__(self, texts, labels, tokenizer, max_len):
        self.texts = texts
        self.labels = labels
        self.tokenizer = tokenizer
        self.max_len = max_len

    def __len__(self):
        return len(self.texts)

    def __getitem__(self, idx):
        text = self.texts[idx]
        label = self.labels[idx]
        encoding = self.tokenizer.encode_plus(
            text,
            add_special_tokens=True,
            max_length=self.max_len,
            return_token_type_ids=False,
            padding='max_length',
            truncation=True,
            return_attention_mask=True,
            return_tensors='pt'
        )
        return {
            'input_ids': encoding['input_ids'].flatten(),
            'attention_mask': encoding['attention_mask'].flatten(),
            'label': torch.tensor(label, dtype=torch.long)  # Ensure label is a tensor
        }

# Prepare data
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')
max_len = 50  # Adjust based on your dataset
label_map = {label: idx for idx, label in enumerate(set(intents))}
labels = [label_map[intent] for intent in intents]

# Split the data into training and validation sets
train_texts, val_texts, train_labels, val_labels = train_test_split(
    utterances, labels, test_size=0.2, random_state=42
)

train_dataset = IntentDataset(train_texts, train_labels, tokenizer, max_len)
val_dataset = IntentDataset(val_texts, val_labels, tokenizer, max_len)

train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=16)

# Define the BERT model with random initialization
class IntentClassifier(nn.Module):
    def __init__(self, n_classes):
        super(IntentClassifier, self).__init__()
        self.bert = BertModel(config='bert-base-uncased')  # Use random weights
        self.dropout = nn.Dropout(0.3)
        self.fc = nn.Linear(self.bert.config.hidden_size, n_classes)

    def forward(self, input_ids, attention_mask):
        outputs = self.bert(input_ids, attention_mask=attention_mask)
        pooled_output = outputs[1]  # Use the pooled output
        pooled_output = self.dropout(pooled_output)
        return self.fc(pooled_output)

# Initialize model, optimizer, and loss function
model = IntentClassifier(n_classes=len(label_map))
optimizer = AdamW(model.parameters(), lr=2e-5)
loss_fn = nn.CrossEntropyLoss()

# Training loop
def train_model(model, train_loader, val_loader, optimizer, loss_fn, num_epochs):
    for epoch in range(num_epochs):
        model.train()
        total_loss = 0
        for batch in train_loader:
            optimizer.zero_grad()
            input_ids = batch['input_ids']
            attention_mask = batch['attention_mask']
            labels = batch['label']
            
            outputs = model(input_ids, attention_mask)
            loss = loss_fn(outputs, labels)
            total_loss += loss.item()
            loss.backward()
            optimizer.step()
        
        avg_train_loss = total_loss / len(train_loader)
        print(f"Epoch {epoch + 1}/{num_epochs}, Train Loss: {avg_train_loss:.3f}")

        # Validation step
        model.eval()
        val_preds, val_labels = [], []
        with torch.no_grad():
            for batch in val_loader:
                input_ids = batch['input_ids']
                attention_mask = batch['attention_mask']
                labels = batch['label']
                
                outputs = model(input_ids, attention_mask)
                _, preds = torch.max(outputs, dim=1)
                val_preds.extend(preds.numpy())
                val_labels.extend(labels.numpy())
        
        print(classification_report(val_labels, val_preds, target_names=label_map.keys()))

# Train the model
num_epochs = 5
train_model(model, train_loader, val_loader, optimizer, loss_fn, num_epochs)